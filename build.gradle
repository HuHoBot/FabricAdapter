plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
	maven { url "https://maven.fabricmc.net/" }
}

dependencies {
	// Minecraft依赖
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	// 配置文件支持
	implementation "org.yaml:snakeyaml:1.33"

	// WebSocket支持
	implementation "org.java-websocket:Java-WebSocket:1.5.3"
	implementation 'com.alibaba.fastjson2:fastjson2:2.0.52'
}

// 多版本构建任务
def supportedVersions = ["1.16.5", "1.17.1", "1.18.2", "1.19.2", "1.20.1", "1.20.4", "1.21.1"]

supportedVersions.each { version ->
	def versionKey = version.replace('.', '_')

	task "build${versionKey}"(type: GradleBuild) {
		group = 'build'
		description = "Build for Minecraft ${version}"

		doFirst {
			// 动态设置版本相关属性
			project.ext.mcVersion = version
			project.ext.mappingsVersion = getMappingsForVersion(version)
			project.ext.loaderVersion = getLoaderForVersion(version)
			project.ext.fabricApiVersion = getFabricApiForVersion(version)

			println "Building for Minecraft ${version}"
			println "Mappings: ${project.ext.mappingsVersion}"
			println "Loader: ${project.ext.loaderVersion}"
			println "Fabric API: ${project.ext.fabricApiVersion}"
		}

		tasks = ['build']

		// 通过命令行参数传递版本信息
		startParameter.projectProperties = [
				'minecraft_version': version,
				'yarn_mappings': getMappingsForVersion(version),
				'loader_version': getLoaderForVersion(version),
				'fabric_api_version': getFabricApiForVersion(version)
		]
	}
}

// 新增配置生成任务
tasks.register('generateServerConfig', Copy) {
	group = 'Build'
	description = 'Generate server config'

	from 'src/main/templates/java'
	into 'src/main/generated/java'

	// 新增文件名处理
	include '**/*.template'
	rename { filename ->
		filename.replace('.template', '')
	}

	filter { line ->
		line.replace('${WS_SERVER_URL}',
				project.findProperty('wsServerUrl') ?: 'ws://127.0.0.1:8080')
	}

	filteringCharset = 'UTF-8'
}

// 将生成的代码目录加入源码集
sourceSets.main.java.srcDir 'src/main/generated/java'

// 确保编译前先执行生成任务
compileJava.dependsOn generateServerConfig

clean {
	delete 'src/main/generated'
}

// 版本映射函数
static def getMappingsForVersion(String version) {
	def mappings = [
			"1.16.5": "1.16.5+build.10",
			"1.17.1": "1.17.1+build.65",
			"1.18.2": "1.18.2+build.4",
			"1.19.2": "1.19.2+build.28",
			"1.20.1": "1.20.1+build.10",
			"1.20.4": "1.20.4+build.3",
			"1.21.1": "1.21.1+build.1"
	]
	return mappings.get(version, "1.20.1+build.10")
}

static def getLoaderForVersion(String version) {
	def loaders = [
			"1.16.5": "0.11.7",
			"1.17.1": "0.12.0",
			"1.18.2": "0.13.0",
			"1.19.2": "0.14.0",
			"1.20.1": "0.15.0",
			"1.20.4": "0.15.0",
			"1.21.1": "0.16.0"
	]
	return loaders.get(version, "0.15.0")
}

static def getFabricApiForVersion(String version) {
	def apis = [
			"1.16.5": "0.42.0+1.16",
			"1.17.1": "0.46.1+1.17",
			"1.18.2": "0.58.0+1.18",
			"1.19.2": "0.76.0+1.19",
			"1.20.1": "0.83.0+1.20",
			"1.20.4": "0.88.0+1.20.4",
			"1.21.1": "0.91.0+1.21.1"
	]
	return apis.get(version, "0.83.0+1.20")
}

// 聚合任务：构建所有版本
tasks.register('buildAllVersions') {
	group = 'build'
	description = 'Build for all supported Minecraft versions'

	dependsOn supportedVersions.collect { version ->
		"build${version.replace('.', '_')}"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

// 确保打包源码前先执行生成任务
sourcesJar.dependsOn generateServerConfig

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
}